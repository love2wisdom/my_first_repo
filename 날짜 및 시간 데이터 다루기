# 현재 날짜 표시하기 
Sys.time()
date()
lubrigate::now()

Weekdays(Sys.time())
months(Sys.time())
format(Sys.time(), "%letter")

%a Day of the week, abbreviated                                Mon
%A Day of the week, full name                                 Monday
%b Month, abbreviated                                          Dec
%B Month, full name                                          December
%c Date and time, locale-specific                  Mon 20 Dec 2010 13:06:24 CEST
%d Day of the month (01–31)                                    20
%H Hours (0–24)                                                13
%I Hours (0–12)                                                01
%j Day of the year (001–366)                                   354
%m Month (01–12)                                               12
%M Minutes (00–59)                                             06
%S Seconds (00–61), with 2 “leap seconds”                      24
%U Week of the year (00–53); the 1st Sundayis
   counted as day 1 of week 1                                  51
%w Day of the week (0–6); Sunday is 0                           1
%W Week of the year (00–53); the 1st Monday is
   counted as day 1 of week 1                                  51
%x Date, locale-specific                                    2010-12-20
%X Time, locale-specific                                     13:06:24
%y Year without the century                                    10
%Y Year with the century                                      2010
%z Time offset from Greenwich; ’0800’ is 8 h West
   of Greenwich                                               +0100
%Z Time zone as a character string (output only)               CEST


# 데이터 정제 전에 반드시 날짜와 시간 정보를 POSIXlt 또는 POSIXct class로 변환시킬 것!!!
# as.POSIXct() 함수 : 1970-01-01을 시점으로 지정된 날짜(또는 시각)까지의 시간을 초 단위의 숫자 벡터로 반환 
# as.POSIXlt() 함수 : 다음과 같은 정보를 가진 벡터의 리스트를 반환 
sec 0–61: seconds
min 0–59: minutes
hour 0–23: hours
mday 1–31: day of the month
mon 0–11: number of months since the 1st month of the year
year : number of years since 1900
wday 0–6: day of the week, starting on Sunday
yday 0–365: day of the year
isdst : Daylight Saving Time (DST) flag. Positive if DST is observed,
zero otherwise (negative if unknown)

# 정수를 "1991-03-01" 형태로 바꾸기 

# 방법 1 : 표준방법
db.scp.b$STRAT_DAY <- as.Date(db.scp.b$STRAT_DAY, origin = "1970-01-01")
## 원하는 결과가 나오지 않을 수 있음. 

# 방법 2 : 정수를 문자열로 전환한 다음, Date 형으로 변환 
as.Date(as.character("20040819"), format = "%Y%m%d")







# 1. 날짜 자료를 정수로 다루기  

date.lookup <- format(seq(as.Date("2000-01-01"), as.Date("2010-12-31"), by = "1 day"))
match("2004-01-19", date.lookup)

date.lookup[1337]


# 2. Date Class

# create a date
as.Date("2012-08-30")
## [1] "2012-08-30"

# specify the format
as.Date("08/30/2012", format = "%m/%d/%Y")
## [1] "2012-08-30"

# use a different origin, for instance importing values from Excel
as.Date(41149, origin = "1900-01-01")
## [1] "2012-08-30"

# take a difference
Sys.Date() - as.Date("1970-01-01")
## Time difference of 15582 days

# alternate method with specified units
difftime(Sys.Date(), as.Date("1970-01-01"), units = "days")
## Time difference of 15582 days

# see the internal integer representation
unclass(Sys.Date())
## [1] 15582


# 3. POSIXt Date-Time Class 

# current time as POSIXct
unclass(Sys.time())
## [1] 1.346e+09

# and as POSIXlt
unclass(as.POSIXlt(Sys.time()))


# 3.1 Format 

# create POSIXct variables
as.POSIXct("080406 10:11", format = "%y%m%d %H:%M")
## [1] "2008-04-06 10:11:00 CDT"

as.POSIXct("2008-04-06 10:11:01 PM", format = "%Y-%m-%d %I:%M:%S %p")
## [1] "2008-04-06 22:11:01 CDT"

as.POSIXct("08/04/06 22:11:00", format = "%m/%d/%y %H:%M:%S")
## [1] "2006-08-04 22:11:00 CDT"

# convert POSIXct variables to character strings
format(as.POSIXct("080406 10:11", format = "%y%m%d %H:%M"), "%m/%d/%Y %I:%M %p")
## [1] "04/06/2008 10:11 AM"

as.character(as.POSIXct("080406 10:11", format = "%y%m%d %H:%M"), format = "%m-%d-%y %H:%M")
## [1] "04-06-08 10:11"



# 3.2 Example 1 

# when do I turn 1 billion seconds old?
billbday <- function(bday, age = 10^9, format = "%Y-%m-%d %H:%M:%S") {
x <- as.POSIXct(bday, format = format) + age
togo <- round(difftime(x, Sys.time(), units = "days"))
if (togo > 0) {
msg <- sprintf("You will be %s seconds old on %s, which is %s days from now.", age,
format(x, "%Y-%m-%d"), togo)
} else {
msg <- sprintf("You turned %s seconds old on %s, which was %s days ago.", age, format(x,
"%Y-%m-%d"), -1 * togo)
}
if (age > 125 * 365.25 * 86400)
msg <- paste(msg, "Good luck with that.")
print(msg)
format(x, "%Y-%m-%d")
}
billbday("1981-04-13 15:00:00")


# 3.3 Data.frames Hate You

dts <- data.frame(day = c("20081101", "20081101", "20081101", "20081101", "20081101", "20081102",
"20081102", "20081102", "20081102", "20081103"), time = c("01:20:00", "06:00:00", "12:20:00",
"17:30:00", "21:45:00", "01:15:00", "06:30:00", "12:50:00", "20:00:00", "01:05:00"), value = c("5",
"5", "6", "6", "5", "5", "6", "7", "5", "5"))


dts1 <- paste(dts$day, dts$time)
dts2 <- as.POSIXct(dts1, format = "%Y%m%d %H:%M:%S")
dts3 <- as.POSIXlt(dts1, format = "%Y%m%d %H:%M:%S")
dts.all <- data.frame(dts, ct = dts2, lt = dts3)
# lt changed to POSIXct!
str(dts.all)

dts.all <- dts
dts.all$ct <- dts2
dts.all$lt <- dts3
str(dts.all)

unclass(dts.all$ct)
unclass(dts.all$lt)

# round sets to POSIXlt and fails!
dts.all[, "ct"] <- round(dts.all[, "ct"], units = "hours")
## Warning: provided 9 variables to replace 1 variables

# force back to POSIXct
dts.all[, "ct"] <- as.POSIXct(round(dts2, units = "hours"))

# rounding our POSIXlt column also fails
dts.all[, "lt"] <- round(dts3, units = "hours")
## Warning: provided 9 variables to replace 1 variables

# while this works
dts.all$lt <- round(dts3, units = "hours")


# this fails
dts.all[1, "lt"] <- as.POSIXlt("2008-11-01 01:00:00")
## Warning: provided 9 variables to replace 1 variables
## Error: ’origin’ must be supplied

# this works
dts.all$lt[1] <- as.POSIXlt("2008-11-01 01:00:00")

# this works?
dts.all[1, "lt"] <- as.POSIXct("2008-11-01 01:00:00")


time1 <- dts.all$lt[1]
time2 <- dts.all$lt[2]
# presumably do something with the data from time1 to time2
while (time1 < time2) {
time1$hour <- time1$hour + 1
}
print(sprintf("%s -- %s", time1, time2))
## [1] "2008-11-01 06:00:00 -- 2008-11-01 06:00:00"


# 3.4 Daylight Savings and Time Zones 

# another example
time1 <- dts.all$lt[5]
time2 <- dts.all$lt[7]
while (time1 < time2) {
time1$hour <- time1$hour + 1
# notice how hour is the only attribute to change
print(unlist(time1))
}

print(sprintf("%s -- %s", time1, time2))
## [1] "2008-11-02 08:00:00 -- 2008-11-02 07:00:00"

# DST and tzone are confusing they're still equal
time1 == time2
## [1] TRUE

# combining them seems to work
c(time1, time2)
## [1] "2008-11-02 07:00:00 CST" "2008-11-02 07:00:00 CST"

# default to right tzone
as.POSIXlt(as.POSIXct(time1))
## [1] "2008-11-02 07:00:00 CST"

# universal time
dts4 <- round(as.POSIXlt(dts1, format = "%Y%m%d %H:%M:%S", tz = "UTC"), units = "hours")
dts4

# central standard time
round(as.POSIXlt(dts1, format = "%Y%m%d %H:%M:%S", tz = "CST"), units = "hours")


# 3.5 Example 2

# POSIXct data.frame
mydata.ct <- data.frame(date = dts.all$ct, value = dts.all$value)

# POSIXlt data.frame
mydata.lt <- data.frame(date = NA, value = dts.all$value)


mydata.lt$date <- dts.all$lt
# POSIX.lt data.frame using UTC
mydata.lt.utc <- data.frame(date = NA, value = dts.all$value)
mydata.lt.utc$date <- dts4

fill.dates <- function(x) {
dates <- seq(x[1, "date"], x[nrow(x), "date"], by = "hours")
x2 <- data.frame(date = rep(NA, length(dates)), value = NA)
x2$date <- as.POSIXlt(dates)
x2$value[match(as.character(x$date), as.character(x2$date))] <- x$value
for (i in which(is.na(x2$value))) x2[i, "value"] <- x2[i - 1, "value"]
x2
}

data.ct <- fill.dates(mydata.ct)
data.lt <- fill.dates(mydata.lt)
data.lt.utc <- fill.dates(mydata.lt.utc)
cbind(data.ct[21:30, ], data.lt[21:30, ], data.lt.utc[21:30, ])



# 4. Chron Package

library(chron)
# fails on a factor
chron(dts$day, format = "ymd")
## Error: object dates. must be numeric or character
chron(as.character(dts$day), format = "ymd")
## [1] 081101 081101 081101 081101 081101 081102 081102 081102 081102 081103
chron.dts <- chron(date = as.character(dts$day), time = dts$time, format = c("ymd", "h:m:s"))
cdts.all <- dts
cdts.all$cd <- chron.dts
# I hate two-digit year format; methods to display 4 are awful
format(as.POSIXlt(cdts.all$cd, tz = "UTC"), "%Y%m%d %H:%M:%S")

options(chron.year.abb=FALSE) # don't use options as a global variable


5. Lubridate Package

library(lubridate)
ymd_hms("2012-12-31 23:59:59")

ldate <- mdy_hms("12/31/2012 23:59:59")
ldate + seconds(1)

5.1 Instants

now()
## [1] "2012-08-30 13:54:09 CDT"
# last day of the month
ceiling_date(now(), unit = "month") - days(1)
## [1] "2012-08-31 CDT"
# is it morning?
am(now())


5.2 Intervals, Durations, Periods
# how do you want to handle leap years?
ldate - dyears(1)
## [1] "2011-09-01 23:59:59 UTC"
ldate - years(1)
## [1] "2011-08-31 23:59:59 UTC"
# or DST?
force_tz(ymd_hms(as.character(dts.all$lt[5])), "America/Chicago") + dhours(6)
## [1] "2008-11-02 03:00:00 CST"
force_tz(ymd_hms(as.character(dts.all$lt[5])), "America/Chicago") + hours(6)
## [1] "2008-11-02 04:00:00 CST"
# within is a nice function to use with intervals
now() %within% new_interval(ymd("2012-07-01"), ymd("2013-06-30"))

6. Bounus Example : Determine Your Format 
# FUNCTION guessDateFormat @x vector of character dates/datetimes @returnDates return
# actual dates rather than format convert character datetime to POSIXlt datetime, or at
# least guess the format such that you could convert to datetime
guessDateFormat <- function(x, returnDates = FALSE, tzone = "") {
x1 <- x
# replace blanks with NA and remove
x1[x1 == ""] <- NA
x1 <- x1[!is.na(x1)]
if (length(x1) == 0)
return(NA)
# if it's already a time variable, set it to character
if ("POSIXt" %in% class(x1[1])) {
x1 <- as.character(x1)
}
dateTimes <- do.call(rbind, strsplit(x1, " "))
for (i in ncol(dateTimes)) {
dateTimes[dateTimes[, i] == "NA"] <- NA
}
# assume the time part can be found with a colon
timePart <- which(apply(dateTimes, MARGIN = 2, FUN = function(i) {
any(grepl(":", i))
}))
# everything not in the timePart should be in the datePart
datePart <- setdiff(seq(ncol(dateTimes)), timePart)
# should have 0 or 1 timeParts and exactly one dateParts
if (length(timePart) > 1 || length(datePart) != 1)
stop("cannot parse your time variable")

timeFormat <- NA
if (length(timePart)) {
# find maximum number of colons in the timePart column
ncolons <- max(nchar(gsub("[^:]", "", na.omit(dateTimes[, timePart]))))
if (ncolons == 1) {
timeFormat <- "%H:%M"
} else if (ncolons == 2) {
timeFormat <- "%H:%M:%S"
} else stop("timePart should have 1 or 2 colons")
}
# remove all non-numeric values
dates <- gsub("[^0-9]", "", na.omit(dateTimes[, datePart]))
# sep is any non-numeric value found, hopefully / or -
sep <- unique(na.omit(substr(gsub("[0-9]", "", dateTimes[, datePart]), 1, 1)))
if (length(sep) > 1)
stop("too many seperators in datePart")
# maximum number of characters found in the date part
dlen <- max(nchar(dates))
dateFormat <- NA
# when six, expect the century to be omitted
if (dlen == 6) {
if (sum(is.na(as.Date(dates, format = "%y%m%d"))) == 0) {
dateFormat <- paste("%y", "%m", "%d", sep = sep)
} else if (sum(is.na(as.Date(dates, format = "%m%d%y"))) == 0) {
dateFormat <- paste("%m", "%d", "%y", sep = sep)
} else stop("datePart format [six characters] is inconsistent")
} else if (dlen == 8) {
if (sum(is.na(as.Date(dates, format = "%Y%m%d"))) == 0) {
dateFormat <- paste("%Y", "%m", "%d", sep = sep)
} else if (sum(is.na(as.Date(dates, format = "%m%d%Y"))) == 0) {
dateFormat <- paste("%m", "%d", "%Y", sep = sep)
} else stop("datePart format [eight characters] is inconsistent")
} else {
stop(sprintf("datePart has unusual length: %s", dlen))
}
if (is.na(timeFormat)) {
format <- dateFormat
} else if (timePart == 1) {
format <- paste(timeFormat, dateFormat)
} else if (timePart == 2) {
format <- paste(dateFormat, timeFormat)
} else stop("cannot parse your time variable")
if (returnDates)
return(as.POSIXlt(x, format = format, tz = tzone))
format
}
# generate some dates
mydates <- format(as.POSIXct(sample(31536000, 20), origin = "2011-01-01", tz = "UTC"), "%m/%d/%Y %H:%M")
mydates






